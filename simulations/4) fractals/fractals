{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FNb7aOnzB4lZ","executionInfo":{"status":"ok","timestamp":1677000927456,"user_tz":-60,"elapsed":7025,"user":{"displayName":"Daria Matczak","userId":"05070036688655734592"}},"outputId":"1e5a7128-2c3c-441a-e476-9eb5abeae3ea"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting scikit-spatial\n","  Downloading scikit_spatial-6.8.0-py3-none-any.whl (47 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m47.0/47.0 KB\u001b[0m \u001b[31m787.4 kB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: numpy<2.0,>=1.16 in /usr/local/lib/python3.8/dist-packages (from scikit-spatial) (1.21.6)\n","Requirement already satisfied: matplotlib<4,>=3 in /usr/local/lib/python3.8/dist-packages (from scikit-spatial) (3.2.2)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.8/dist-packages (from matplotlib<4,>=3->scikit-spatial) (1.4.4)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.8/dist-packages (from matplotlib<4,>=3->scikit-spatial) (2.8.2)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.8/dist-packages (from matplotlib<4,>=3->scikit-spatial) (3.0.9)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.8/dist-packages (from matplotlib<4,>=3->scikit-spatial) (0.11.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.8/dist-packages (from python-dateutil>=2.1->matplotlib<4,>=3->scikit-spatial) (1.15.0)\n","Installing collected packages: scikit-spatial\n","Successfully installed scikit-spatial-6.8.0\n"]}],"source":["!pip install scikit-spatial"]},{"cell_type":"code","source":["###DRAWING FUNCTIONS ; JUST FOR CHECKING THE OUTPUTS###\n","import matplotlib.pyplot as plt\n","from matplotlib.patches import Circle\n","import numpy as np\n","import random\n","import math\n","\n","class Draw: \n","    def draw_plot(self, l):\n","        a = plt.gca()\n","        fig = plt.gcf()\n","        plt.xlim((0, l))  # obszar do narysowania\n","        plt.ylim((0, l))\n","        fig.set_size_inches((6, 6)) # rozmiar rysunku\n","        a.plot(self.seed_pos[0],  self.seed_pos[1], 'o',\n","        ms= 325, mec='green', mfc='none', mew=2)\n","    \n","    def draw_particle(self, r, pos): # aby sprawdzis gdzie sie spawnują\n","        anew = plt.gca()\n","        cir = Circle((pos[0], pos[1]), radius = self.radius) # kółko tam gdzie jest cząstka\n","        anew.add_patch(cir) # dodaj to kółko do rysunku\n","        plt.plot()       # narysuj\n","\n","        "],"metadata":{"id":"Gqo7lmh1DHvD","executionInfo":{"status":"ok","timestamp":1677000927457,"user_tz":-60,"elapsed":10,"user":{"displayName":"Daria Matczak","userId":"05070036688655734592"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["# CLASS FOR SEED PARTICLE###\n","class SeedParticle(Draw): \n","    \"\"\"\n","    Class creating seed particle.\n","    \"\"\"\n","    def __init__(self, l, r):\n","        self.seed_pos = np.array([l/2, l/2])\n","        self.radius = r\n","        self.aggr_lst = [] # powstaje tylko raz przy inicjacji seed particle \n","                           # tutaj będziemy dodawać wspolzedne czasteczek w klastrze\n","        self.aggr_lst.append(self.seed_pos) # na pierwszą pozycję wstawiam pozycje seedpar bo to jest 1 element klastra"],"metadata":{"id":"_cXv2KiFDX52","executionInfo":{"status":"ok","timestamp":1677000927457,"user_tz":-60,"elapsed":10,"user":{"displayName":"Daria Matczak","userId":"05070036688655734592"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["# CLASS FOR ADDED PARTICLE###\n","class Particle(Draw):\n","    \"\"\"\n","    Class creating particle added during the simulation evolution.\n","    Za każdym razem losowane są inne wartości kątów.\n","    \"\"\"\n","    def __init__(self, r, spos): # theta - random angle\n","#         self.phi = random.random()*2*math.pi\n","#         self.alpha = random.random()*math.pi\n","#         self.pos = np.array([np.cos(self.phi), np.sin(self.phi)])\n","#         self.v = np.array([np.sin(self.phi-self.alpha), -np.cos(self.phi-self.alpha)])\n","        self.radius = r\n","        self.phi = 2*math.pi*random.random()\n","        self.alpha = random.random()*math.pi\n","        self.spos = spos\n","        self.pos = np.array([self.spos[0]+5*np.cos(self.phi), self.spos[1]+5*np.sin(self.phi)])\n","        self.v = np.array([self.spos[0]+np.sin(self.phi-self.alpha), self.spos[1]-np.cos(self.phi-self.alpha)])\n","        \n"],"metadata":{"id":"ynax_PigDYrS","executionInfo":{"status":"ok","timestamp":1677000927458,"user_tz":-60,"elapsed":10,"user":{"displayName":"Daria Matczak","userId":"05070036688655734592"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["###ZNAJDYWANIE ODLEGŁOŚCI MIĘDZY CZAST W AGREAGCIE A PROSTA WYZNACZAJĄCĄ TOR RUCHU DODANEJ CZASTECZKI###\n","from skspatial.objects import Line, Point, Circle\n","\n","def distance(new_point, vector, aggr_lst):\n","    distance_lst = [] # lista powinna być resetowana za kazdym razem gdy robimy petle\n","    projected_points = [] # lista pozycji czast. zrzutowanych na prostą\n","    # line is defined by a point and a point of the direction vector.\n","    vec_line = Line.from_points(new_point, vector) # Line(point=point, direction=direction) # point - miejsce w któym nowa cz została wylosowana ; direct. - wektor kierunku \n","    for p in aggr_lst:\n","        distance = vec_line.distance_point(p)\n","        distance_lst.append(distance) # lista w której zgromadzone są prostopadłe odległosci do prostej\n","        point_proj = vec_line.project_point(p) # Rzutowanie punktu na prostą w celu otrzymania wsp pkt na prostej\n","        projected_points.append(point_proj)\n","    return distance_lst, projected_points, vec_line\n"],"metadata":{"id":"OOwj9sLGDx_A","executionInfo":{"status":"ok","timestamp":1677000927458,"user_tz":-60,"elapsed":10,"user":{"displayName":"Daria Matczak","userId":"05070036688655734592"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["###MIEJSCA PRZECIECIA PROSTEJ Z OKRĘGIEM###\n","###JEZELI SA DWA MIEJSCA PREZCIECIA SIE PROSTEJ Z OKREGIEM NALEZY UWZGLEDNIC TE WSPÓŁRZEDNE KTORE SA BLIZEJ WSPOŁRZEDNYCH SRODKA DODAWNAJE CZASTECZKI### \n","from skspatial.objects import Circle, Line\n","\n","def check_intersect(part_pos, lambd, line): # pozsycja analizowanej czasteczki , promien , przyciagania , zdefiniowana prosta \n","    circle = Circle(part_pos, lambd)\n","    point_a, point_b  = circle.intersect_line(line) # punkty przeciecia prostej z kolem ; kolejnosc jest niewłasciwa ponieważ zalezy od któej str dodawana jets nowa czatseczka w  zwiazku z czym trzeba ustalic któe wsp sa poprawne a zatem blizsze wsp dodanej cczasteczki \n","    point_lst = [point_a, point_b]\n","    dist_a, dist_b = point_a.distance_point(part_pos), point_b.distance_point(part_pos) # odległość pkt a i b od dod. czasteczki \n","    dst_lst = [dist_a, dist_b] # wartości umieszcam w liscie aby ustalić mniejszy dystans (łatwiej bedzie wtedy wyznaczyc indeks)\n","    min_dist = min(dst_lst)\n","    min_point_dist_indx = dst_lst.index(min(dst_lst)) # wyznaczam jej indeks aby wiedzec o która czast. chodzi\n","    chosen_point = point_lst[min_point_dist_indx]\n","    return chosen_point\n"],"metadata":{"id":"IdYpuuABDy1c","executionInfo":{"status":"ok","timestamp":1677000927458,"user_tz":-60,"elapsed":10,"user":{"displayName":"Daria Matczak","userId":"05070036688655734592"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["###FUNKCJA DODAJACA CZASTECZKE DO AGREGATU ORAZ OKRESLAJACE WSPÓŁRZEDNE CZASTECZKI W AGREGACIE###\n","# d2= ODLEGŁOSC W KTOREJ CHCEMY DODAĆ NOWĄ CZASTECZKE DO AGREGATU: 2*r czasteczki \n","def add(d, r, chosen_particle, chosen_point):\n","    d2 = 2* r # 2* radius czasteczek\n","    d_ratio = d2/d \n","    x_new = (1-d_ratio) * chosen_particle[0] + d_ratio*chosen_point[0]\n","    y_new = (1-d_ratio) * chosen_particle[1] + d_ratio*chosen_point[1]\n","    new_coord =  [x_new, y_new]\n","    return new_coord"],"metadata":{"id":"0tgnq8boEsjy","executionInfo":{"status":"ok","timestamp":1677000927458,"user_tz":-60,"elapsed":9,"user":{"displayName":"Daria Matczak","userId":"05070036688655734592"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["###FUNKCJA WARUNKJĄCA KONIEC SYMULACJI###\n","def finish(aggr_lst, Nmax): # nMAX - maksymalna ilosc czasteczek w agregacie\n","    return len(aggr_lst) == Nmax"],"metadata":{"id":"bATe5CBGFEzg","executionInfo":{"status":"ok","timestamp":1677000927459,"user_tz":-60,"elapsed":10,"user":{"displayName":"Daria Matczak","userId":"05070036688655734592"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["###SIMULATION###\n","r=.01  \n","Nmax = 1000\n","\n","lambd = .2\n","l = 2 # wielkość planszy\n","ps = SeedParticle(l, r)# tworze seed particle ; (ps.seed_pos[0], ps.seed_pos[0]) - wsp. seed particle\n","\n","fig, ax = plt.subplots()\n","limits = plt.axis([0, l, 0, l])\n","fig.set_size_inches((6, 6))\n","plt.xticks(fontsize = 13)\n","plt.yticks(fontsize = 13) \n","# ax.plot(ps.seed_pos[0], ps.seed_pos[1], 'o', ms= 325, mec='green', mfc='none', mew=2) # okrąg pomocniczy w celu wizualizacji miesc dodawnayych czasteczek\n","\n","cir = Circle((ps.seed_pos[0], ps.seed_pos[0]), r) # kółko tam gdzie jest cząstka\n","cir.plot_2d(ax)\n","\n","# pnvec = pn.v # wsp wektora kier dodanej czasteczki\n","# pnpos = pn.pos # wsp dodanej czasteczki \n","\n","while finish(ps.aggr_lst, Nmax) == False: # przeprowadzam symulację tak długo az liczba elementow w agregacie osiągnie max. wartosc\n","        pn = Particle(r, ps.seed_pos)\n","        pnpos, pnvec = pn.pos, pn.v # wsp dodanej czasteczki ; wektor pred\n","        distance_lst, projected_points, vec_line = distance(pnpos, pnvec, ps.aggr_lst)\n","        if min(distance_lst)<lambd: # jeśli jest to prawda to czasteczke trzeba dodać do agreagtu (czyli jesli prosta przecina okrąg o promieniu lambd)\n","            min_dist_indx = distance_lst.index(min(distance_lst)) # indeks najmniejszej odl w dis_lst, odpowiada on temu samemu indx w aggr_lst\n","            min_dis_coord_aggr = ps.aggr_lst[min_dist_indx]\n","            # wybranie jednego z miejsc przecieciecia sie prostej z kolem o promieniu = lambd \n","            intersect_point = check_intersect(min_dis_coord_aggr, lambd, vec_line)\n","            # współrzedne dodanej czasteczki w agregacie\n","            new_coord = add(lambd, r, min_dis_coord_aggr, intersect_point)\n","            # dodaje współrzedne czasteczki do listy wsp. czasteczek w klastrze\n","            ps.aggr_lst.append(new_coord)\n","            \n","            # plotowanie dodanej czasteczki do klastra\n","            new_aggr_point = Circle((new_coord), r) \n","            new_aggr_point.plot_2d(ax)\n","            \n","        else: continue\n","            # dodajemy kolejną cząsteczkę\n","# print(ps.aggr_lst)\n","# print(pnpos)"],"metadata":{"id":"IfZKfIPOGBpP","colab":{"base_uri":"https://localhost:8080/","height":382},"executionInfo":{"status":"ok","timestamp":1677001036630,"user_tz":-60,"elapsed":102980,"user":{"displayName":"Daria Matczak","userId":"05070036688655734592"}},"outputId":"f0d08bb9-7f03-4687-dbde-c82e6f70cc37"},"execution_count":9,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x432 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":[],"metadata":{"id":"36Igj59dDufC"},"execution_count":null,"outputs":[]}]}